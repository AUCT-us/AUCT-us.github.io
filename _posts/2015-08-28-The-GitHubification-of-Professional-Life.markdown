---
layout: post
title:  "GitHubification of professional workflows and careers"
date:   2015-08-28 8:30:00
categories: Technology
---
Be a professional in the use of a distributed version control has become ESSENTIAL career skill.

There are different reasons for this ... for example, the FIRST factor in a 12 factor app is that although there might be many different deployments, a twelve-factor app is ALWAYS tracked in a version control system, such as Git, Mercurial, or Subversion. A copy of the revision tracking database is known as a code repository, often shortened to code repo or just repo.

The best version control system is the DISTRIBUTED open-source control system known as Git and the best Git host is currently Github.

Let's back up a second and think about WHY distributed control matters so much ... and why the codegraph of Github is as important to professional workflows as it is.

**What if we take the relationships and connections in OUR data and reimagined OUR professional efforts and organizations along those data-driven algorithmic relationships? What would that look like?** Could professionals govern themselves and govern their relationships in a fair, open, transparent equitable manner with smart-contracts and version-controlled [and code-graphed] repositories of the commits they make in their workflow? **How can we build more transparent and equitable organizations that allows professionals to exercise greater control over their daily workflow?**"

[Conway's Law](https://en.wikipedia.org/wiki/Conway%27s_law) tells us that *organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations.*  This means that the organizations which have been trying to produce new innovative products are all going to fail at really changing their products OR their development processes because their organizations are inherently corrupted by old methods, thoroughly calcified and the professional who must develop within this calcified old structure cannot do anything other than produce a new revision of the same old crap that the organization always has produce. Increasing we see that organizations must ACQUIRE new technology rather than develop it themselves ... and [Conway's Law](https://en.wikipedia.org/wiki/Conway%27s_law) tells us that this is LAW; it might be disappointing, but this is the reality of development.  And professionals that work within the traditional structure are condemned to suffer the doom and stagnation of the traditional structure UNTIL the organization somehow acquires a new methodology or embraces the leadership of a better approach.

Enter GitHub and the GitHubification of professional work and what has happened in explosively successful companies like [Netflix](http://techblog.netflix.com/). [Open source socially-produced code has arrived](http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/) because the most savvy DevOps engineers thoroughly understand why collaborating on an open source team is not only fun and that the collaborative effort also "moves the ball ahead" for everyone ... there's a private intrinsic reward, but with the [GitHub graphs and contributions metrics](https://help.github.com/categories/graphs-and-contributions/) there is also the direct professional recognition [and possible financial reward] that comes from the public trail of commits.

The transparency and code-graphhing of Github is really nothing more than the reliability growth analysis and collecting, modeling, analyzing and interpreting data from the code graph of a open source development program.  We assess the trajectory of the time and money required to develop a solution by looking at the GitHub codegraph ... but in order to really understand the GitHub codegraph we need to have an appreciation for [Git](https://en.wikipedia.org/wiki/Git_(software)) and the [history of and rational for distributed version control systems](https://en.wikipedia.org/wiki/Git_(software)) and the practical nuts-and-bolts of the [foundations of Git, use Git on the command line and the Github graphical user interfaces](https://youtu.be/FyfwLX4HAxM?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-)... and of course we should understand the economics of [what the GitHub social coding ecosystem is about](https://www.quora.com/What-makes-GitHub-such-an-important-and-strategic-web-property) or how [GitHub conquered Microsoft and Google and everyone else](http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/) and what [being social](https://help.github.com/articles/be-social/) and then [extending Github platform](https://developer.github.com/program/) is about.  

**Don't worry if this doesn't make sense yet, it will** ... it will make more and more sense to you as you **use Github** to collaborate with other developers and use that experience to show you how to evaluate the GitHub codegraphs of various [development repositories](https://help.github.com/articles/about-repository-graphs/) and [developer progress](https://help.github.com/articles/viewing-contributions-on-your-profile-page/).
