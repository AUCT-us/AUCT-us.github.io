---
layout: post
title:  "Go language and learning Russian"
date:   2015-09-23 8:30:00
categories: learning
---

I have been thinking a lot about the old story or parable of the [Tower of Babel](https://en.wikipedia.org/wiki/Tower_of_Babel) lately ... parables embed wisdom in cultures.  The lesson from Tower of Babel is we should be nervous about imagining that we can work well in different languages on difficult safety-critical projects of any scale.  It is probably not humanly impossible for someone to become a proficiently-wise polyglot in just one lifetime; it is impossible to have a competent multi-lingual team.  There has to be a common language that glues the conversation and collaboration together.  Yes, it is possible to become fluent enough in multiple languages to become dangerous, but being proficient to be wise and think with clear judgement is a lot tougher ... this is not exactly the same as saying that most authors will never develop the proficiency to be Shakespeare -- that's already obvious enough.  It's sort of like saying that most authors will probably never develop the multi-lingual proficiency to become remotely as competent [in different languages/cultures] as Kurt Vonnegut or Norman Mailer or John le Carr√© were in English ... and certainly no multi-lingual author will be as proficient in multiple languages as the Steinbecks, Hemingways, Faulkners or Clarkes, Asimovs, Heinleins and other proficient users of the English language.  

This posting is about computer languages, specifically the Go programming language.  The [rate of adoption of Go language](http://www.google.com/trends/explore#q=golang&date=3%2F2012%2073m&cmpt=q&tz=Etc%2FGMT%2B5) is just flat out impressive by almost any measure.  Go became a public open source project on November 10, 2009. After a couple of years of very active design and development, stability was called for and Go 1 was released on March 28, 2012.  There are, of course, other languages that one might want to be proficient or fluent in ... languages that you cannot really ignore, even if you want to ... C, Java, Python, Javascript, Erlang, Ruby, Haskell, Scala ... but there are very good reasons to learn something about Go that are not just about why Go adoption is exploding, particularly in very interesting projects like Docker or CockroachDB.  

You want to be VERY, VERY CAREFUL before you invest any effort learning in a new programming language ... most programmers are not remotely careful enough about bumbling into a new language ... if we want to understand why, let's think about what we know about spoken languages.  

[Learning any new language as an adult](https://www.quora.com/What-are-the-best-ways-to-learn-a-language-as-an-adult) can be a rather daunting and unrewarding task AT FIRST.  4% of students embarking on *language courses in schools* achieve a BASIC level of fluency after three years; 96% of the student invest time and money learning a language might start the best intentions and the kids are certainly smart enough and most of them are motivated enough to achieve other things in life, but they fail to learn new languages because they start out with completely wrong expectations. It takes 600+ hours of study and practice to reach BASIC fluency in a typical new language, unless you already speak a language that is linguistic similar, eg French-Spanish-Portuguese-Italian or English-German-Dutch are examples of linguistic similar languages ... let that sink in for a second, 600+ is 2 hrs/day -- ideally with most of that time spent practicing with fluent speaker, EVERY day for a full year to get a BASIC, three-year-old's level of fluency!

Fluency is not proficiency or mastery, mind you ... effectively, fluency is not that much more than being able to follow a conversation translating what the speaker says and to ask VERY, VERY BASIC questions -- fluency means that you can interact, but it does not mean that you can interact natively, without thinking... fluency is like hacking code, copy-and-pasting algorithmic snippets and taking 5X or 10X as long to debug code as someoe who is good enough to be proficient ... at some point, you need to move beyond simple hacking and translating and you need to form new thoughts and actually THINK in a language.  REALLY learning a lanaguage to be able to think in that language will take you a LOT MORE than just 600+ hours; probably at least one order if not almost two orders of magnitude longer.

Of course, the ENTIRE reason to go to the effort of really learning a language well enough to THINK in that language is that, as Ludwig Wittgenstein famously said long ago [Tractatus Logico-Philosophicus (1922)], *a new language will expand the limits of your world dramatically* but only if you USE it* ... you need to understand and live the idioms and patterns, the best practices and the stories and parables that go with them, the algorithms and ways of thinking. Learning new ways to think is the big reason to learn a new language and USE IT!  

I will admit that these are not very robust metaphors but they do sort of illustrate the way that I see the language thing.  Being fluent in Javascript, Python, Ruby and various scripting languages is [for a native English speaker] a lot like learning German or learning to use English at a higher, more abstract level ... everytime I turn around, I find myself thinking I should be better at these.  If I did not already have a bit of a background in it, C [and to some degree C++ and Java] would probably be like learning Chinese ... almost painful, but I do not have a choice ... the number of applications for it is in the billions and neither C nor Chinese are going to go away.  Learning other languages like Erlang, Haskell or Go are probably a lot like learning Russian -- people are doing some really interesting, really complex things in those languages and the mental world inhabited by those people is obviously far different than the middle-class American mental realm ... so why not explore it?  But there are limits to what I can do, so when it comes to other languages like Cobol, Pascal, Fortran or *even a scientific computing language like [Julia](https://github.com/JuliaLang/julia) that I probably SHOULD dig into* ... those languages are like French or Spanish or Portuguese or Italian ... yes, I know that a lot of great people use them and maybe they really turned my head at one at one time, but I don't see them impacting my future that directly so I think I will just rely on friends or robo translators.


I think I will look at some Go idioms ... or maybe some Russian proverbs
