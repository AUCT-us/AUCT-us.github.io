<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MarkBruns Tech Blog</title>
    <description>This is my blog about version-controlled social production of open source technology ... feel free to reach out to me and tell me how I can be of service to you!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Sep 2015 10:20:47 -0500</pubDate>
    <lastBuildDate>Tue, 15 Sep 2015 10:20:47 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>It looks like we might have consensus!</title>
        <description>&lt;p&gt;I enjoy and am frustrated by the topic of CONSENSUS enough that I once started writing a book once about consensus and distributed leadership … &lt;a href=&quot;http://www.platosrepublicans.com/&quot;&gt;Plato’s Republicans&lt;/a&gt; … my interest in political economics and social choice theory gradually was overcome by the more concrete and practical world of consensus algorithms for distributed databases … although I continue to see BOTH topics as very closely related, but I now see that the implementations of the distributed database algorithms offers much more promise than the theoretic navel-gazing of political economics and the even more abstract topic of how leaders form, seize, shape, manipulate, define consensus … &lt;em&gt;if you thought consensus algorithms were difficult.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a techblog so my focus in this post is upon an exploration of consensus algorithms in distributed databases.  In these RT/FT algorithms as in life with humans, it is easy to recognize what consensus is after you are there … everyone loves it and we almost declare some sort of moral triumph when we exclaim, “So we have consensus!” … but the pain of converging on the final solution can be a bugger … especially if speed of convergence matters.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Paxos_(computer_science)&quot;&gt;Paxos&lt;/a&gt; … first published in 1989, named after a fictional legislative consensus system used on the Paxos island in Greece. The Paxos family of protocols includes a spectrum of trade-offs between the number of processors, number of message delays before learning the agreed value, the activity level of individual participants, number of messages sent, and types of failures. Although no deterministic fault-tolerant consensus protocol can guarantee progress in an asynchronous network, Paxos guarantees safety (consistency), and the conditions that could prevent it from making progress are difficult to provoke. Paxos is usually used where durability is required (for example, to replicate a file or a database), in which the amount of durable state could be large. The protocol attempts to make progress even during periods when some bounded number of replicas are unresponsive. There is also a mechanism to drop a permanently failed replica or to add a new replica.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chandra%E2%80%93Toueg_consensus_algorithm&quot;&gt;Chandra-Toueg&lt;/a&gt; … published by Tushar Deepak Chandra and Sam Toueg in 1996, is an algorithm for solving consensus in a network of unreliable processes equipped with an eventually strong failure detector. The failure detector is an abstract version of timeouts; it signals to each process when other processes may have crashed. An eventually strong failure detector is one that never identifies some specific good process as having failed after some initial period of confusion, and at the same time eventually identifies all bad processes as failed. The algorithm itself is similar to the Paxos algorithm, which also relies on failure detectors. Both algorithms assume the number of faulty processes is less than n/2, where n is the total number of processes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raft.github.io/&quot;&gt;Raft&lt;/a&gt; … first published in 2013 by &lt;a href=&quot;https://ongardie.net/&quot;&gt;Diego Ongaro&lt;/a&gt; and &lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/home.php&quot;&gt;John Osterhout&lt;/a&gt; is a understandable, more readily-implementable consensus algorithm designed as a more &lt;a href=&quot;http://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf&quot;&gt;practical alternative to famously difficult Paxos algorithm&lt;/a&gt;. It’s no accident – according to Ongaro, &lt;a href=&quot;https://www.youtube.com/watch?v=6bBggO6KN_k&quot;&gt;the idea for Raft was CONCIEVED and then DESIGNED AT EVERY STEP TO BE MORE UNDERSTANDABLE&lt;/a&gt; than Paxos or Chandra-Toueg algorithms by means of separation of logic, but it is also formally proven safe and offers some new features. Raft offers a generic way to distribute a state machine across a cluster of computing systems, ensuring that each node in the cluster agrees upon the same series of state transitions.  Although Raft is a recent development, it already has a number of open-source reference implementations, with full-spec implementations in Go, C++, Java, and Scala.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arxiv.org/pdf/1407.4765.pdf&quot;&gt;Ark&lt;/a&gt; … first published in 2014 by Zardosht Kashef and Leif Walsh It ultimately has many similarities with Raft, but diverges in a few ways, mainly to support other features like chained replication and unacknowledged writes. Ark elections have been used in &lt;a href=&quot;https://github.com/Tokutek/mongo&quot;&gt;TokuMX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading list …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TBD accelerated social consensus research … &lt;em&gt;like the rest of this reading list, this is glaringly incomplete&lt;/em&gt; especially given the material that should be out there on NEW forms of social leadership … what does social graph research tell us about the emergence of leader candidates; can the heuristic selection of leaders be applied to algorithms?  One would think that surely the voluminous research afforded by all of the social graph data from Twitter, FB and LinkedIn have taught us at least as much about nuances in the selection of Leaders and how followers aggregate as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Byzantine_fault_tolerance&quot;&gt;Byzantine Generals&lt;/a&gt; ever taught us about fault-tolerance, right… consider also Bitcoin and &lt;a href=&quot;https://en.wikipedia.org/wiki/Bandwagon_effect&quot;&gt;other cultural phenomena, such as the bandwagon effect&lt;/a&gt; … as one might expect in industries where social interaction threatens the dominant regime, there are some &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pmc/articles/PMC411092/&quot;&gt;really thorough, CRITICAL systematic reviews of the effects of online peer to peer interactions in healthcare&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TBD consensus algorithm dissertations and peer-reviewed papers … another glaringly incomplete bullet point … &lt;a href=&quot;http://lampwww.epfl.ch/~blackbal/Thesis/thesis.pdf&quot;&gt;A Formal Approach to Fault Tolerant Distributed Consensus&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://research.google.com/archive/spanner.html&quot;&gt;Google’s Spanner&lt;/a&gt; &lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&quot;&gt;pdf&lt;/a&gt;, &lt;a href=&quot;http://research.google.com/archive/spanner-osdi2012.pptx&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;http://livestream.com/accounts/1545775/osdi12/videos/4646642&quot;&gt;2012 talk at OSDI&lt;/a&gt; Spanner is Google’s scalable, multi-version, globally-distributed, and synchronously-replicated database. It is the first system to distribute data at global scale and support externally-consistent distributed transactions. This paper describes how Spanner is structured, its feature set, the rationale underlying various design decisions, and a novel time API that exposes clock uncertainty. This API and its implementation are critical to supporting external consistency and a variety of powerful features: non-blocking reads in the past, lock-free read-only transactions, and atomic schema changes, across all of Spanner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/&quot;&gt;Google Cloud Datastore balances strong and eventual consistency&lt;/a&gt; … achieving strong consistency for a positive user experience while leveraging the eventual consistency model to scale to large datasets. Eventual consistency is a theoretical guarantee that, provided no new updates to an entity are made, all reads of the entity will eventually return the last updated value. The Internet Domain Name System (DNS) is a well-known example of a system with an eventual consistency model. DNS servers do not necessarily reflect the latest values but, rather, the values are cached and replicated across many directories over the Internet. It takes a certain amount of time to replicate modified values to all DNS clients and servers. However, the DNS system is a very successful system that has become one of the foundations of the Internet. It is highly available and has proven to be extremely scalable, enabling name lookups to over a hundred million devices across the entire Internet.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Eventual_consistency&quot;&gt;Eventually consistent&lt;/a&gt; services are often classified as providing BASE (Basically Available, Soft state, Eventual consistency) semantics, in contrast to traditional ACID (Atomicity, Consistency, Isolation, Durability) guarantees. Eventual consistency is sometimes criticized as increasing the complexity of distributed software applications. This is partly because eventual consistency is purely a liveness guarantee (reads eventually return the same value) and does not make safety guarantees: an eventually consistent system can return any value before it converges.  &lt;a href=&quot;http://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed&quot;&gt;The CAP theorem&lt;/a&gt; asserts that any net­worked shared-data system can have only two of three desirable properties. How­ever, by explicitly handling partitions, designers can optimize consistency and availability, thereby achieving some trade-off of all three.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TBD … video playlists&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/facebook/rocksdb&quot;&gt;RocksDB&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/FoundationDB&quot;&gt;FoundationDB&lt;/a&gt; … the &lt;em&gt;consensus&lt;/em&gt; is that &lt;a href=&quot;http://www.forbes.com/sites/benkepes/2015/03/25/a-cautionary-open-source-tale-apple-buys-and-shutters-foundationdb/&quot;&gt;Apple is not about to become an open source company&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extended blogosphere and twittersphere TBD&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MORE repository TBD&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 Sep 2015 03:30:00 -0500</pubDate>
        <link>/algorithms/social/leadership/2015/09/23/Consensus.html</link>
        <guid isPermaLink="true">/algorithms/social/leadership/2015/09/23/Consensus.html</guid>
        
        
        <category>algorithms</category>
        
        <category>social</category>
        
        <category>leadership</category>
        
      </item>
    
      <item>
        <title>The best way to criticize is to create!</title>
        <description>&lt;p&gt;&lt;strong&gt;The best way to criticize is to CREATE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In an abstract sense, we all [should] want to fight evil. It is necessary to avoid aiding evil by just generating more chaos, but you can always recognize evil by its actions; evil terrorizes and oppresses and blames while using all kinds of arguments and pride to justify its use of terror, blame and jealousy.  If you want to defeat an enemy, Sun Tzu’s advice will always hold “first attack the enemy’s strategy, then his alliance, next his army and last his cities.” In other words, &lt;strong&gt;attack the PROBLEM intelligently and creatively, don’t be an idiot and harm the innocents!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is tough to think strategically about fighting something as abstract as evil, but you can bring it down to the intensely practical level, where evil has directly impacted your own daily life.  You do not need to look all that far to find the presence of evil … you know what you need to do in your own life or your own projects, for example … be persistent, aim for quality not quantity, be more fit, train and exercise your muscle and your mind, humbly never stop learning and maniacally research your customer … fighting evil is basically a matter of working hard doing the right things before you get paid.&lt;/p&gt;

&lt;p&gt;You already know what evil is when you see it; you shouldn’t switch on the news or get distracted by the movies. You are swimming in evil all around you. You might have witnessed the effects of different forms of evil: telling lies, gossiping, cheating, underhanded subterfuges, engaging in office politics, for instance.  You don’t want to attack the cities of innocent people; you want to attack strategically.&lt;/p&gt;

&lt;p&gt;Practically, this means finding a PROBLEM that bugs you and attacking the problem, not the people.  You might want to fight the strategies of obfuscators and weasels OR if you detest toxic workplaces and resource-wasting meetings, you have to work on a strategy that involves creating a more just equitable, honest, open workflow.  It’s one thing to do that on your own, but establishing something like for others has been really HARD to accomplish on your own … until now.&lt;/p&gt;

&lt;p&gt;Thanks to the fact that &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;the open source revolution has FULLY arrived and now legitimately dominates economic growth in the world&lt;/a&gt;, you can and should become an OpenSourcist, join forces with others in something like playing a small role &lt;a href=&quot;https://git-scm.com/community&quot;&gt;the Git community&lt;/a&gt; to create an even better Git or curate a &lt;a href=&quot;https://www.youtube.com/playlist?list=PLElrASo3VHBy9JJzDdkvkqdV0ZlbCCheR&quot;&gt;playlist of useful Git-related videos&lt;/a&gt; or even just convincing others to use a distributed version controls system like Git in a blog posting.  The [Git Documentation repository &lt;a href=&quot;https://github.com/git/git/tree/master/Documentation&quot;&gt;on GitHub&lt;/a&gt; in the &lt;a href=&quot;https://github.com/git/git&quot;&gt;Git source code repository&lt;/a&gt; has several files of interest to developers who are looking to help contribute. After reading the &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/CodingGuidelines&quot;&gt;coding guidelines&lt;/a&gt;, you can learn &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/SubmittingPatches&quot;&gt;how to submit patches&lt;/a&gt;. For those looking to get more deeply involved, there is a &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt&quot;&gt;howto for Git maintainers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, it is also important to not to be too trusting and maintain a situational awareness for what is happening in the open source world – as these projects become significantly larger and much more valuable, the &lt;a href=&quot;http://www.wired.com/2015/07/open-source-going-even-openbecause/&quot;&gt;open source single-sponsor model breaks down&lt;/a&gt;.  There’s a still a lot of proprietary, closed-source evil to fight … there are TONS of allies and they are hard-nosed practical fighters not altuistic idealist pansies … so if you want to be an Open Source warrior, you need to “march toward the sound of gunfire” or find the most awesome startup companies or heavily-starred, heavily-followed ACTIVE repositories, roll up your sleeves and fork and clone different repositories, learn everything you can about the code, learn about the people and the organizations that are involved, blog/tweet/evangelize about what they are up to … network with different people doing cool things, help do cool things and then network some more!  Don’t stop fighting.&lt;/p&gt;

&lt;p&gt;If you want to defeat evil, work at creating a PRODUCTIVE community!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best way to fight is to create.  There are opportunities everywhere.  ATTACK the problems! ATTACK the opportunities! ATTACK! The best way to attack is to create!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2015 03:30:00 -0500</pubDate>
        <link>/situational/intelligence/2015/09/16/Situational-Intelligence.html</link>
        <guid isPermaLink="true">/situational/intelligence/2015/09/16/Situational-Intelligence.html</guid>
        
        
        <category>situational</category>
        
        <category>intelligence</category>
        
      </item>
    
      <item>
        <title>Workflow-As-Code ... Culture Drives Freedom And Responsibility</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.forbes.com/sites/joshbersin/2015/03/13/culture-why-its-the-hottest-topic-in-business-today/&quot;&gt;Culture&lt;/a&gt; should be an important topic because organizational culture drives organization output.  How can we enable the &lt;a href=&quot;http://www.slideshare.net/reed2001/culture-1798664&quot;&gt;most healthy, most enjoyable, MOST PRODUCTIVE customer-centric culture&lt;/a&gt; … and after we do that, how do we make it even BETTER?&lt;/p&gt;

&lt;p&gt;The practical experience of the most successful emergent up-and-coming firms on the planet right now, such as &lt;a href=&quot;http://techblog.netflix.com/&quot;&gt;Netflix&lt;/a&gt; or &lt;a href=&quot;https://youtu.be/2fBNuK6CRmA?t=54m46s&quot;&gt;GitHub&lt;/a&gt; or Airbnb or Uber or any emergent company you want to pick, suggest that a better, more dynamic and antifragile culture is NOT a matter of diversity quotas or cool perks or quirky policy or any nice little participation ribbon tied to some secondary or tertiary initiative that was allowed to pollute the work environment … the most important thing about a better culture is customer-driven focus … that means that everyone must respect and serve the central mission of the organization with an expectation of performance and delivery on SMART objectives that are aligned to the customer-driven focus … a better culture comes with the freedom and responsibility to build personal and professional independence and to be able to move on to something that serves customers even better.&lt;/p&gt;

&lt;p&gt;It is about lean thinking, seeing waste and designing the non-value-added distractions out of the equation and optimizing the flow past the constraints in our systems and our workflow.   A better FLOW of work that has become practically achievable by understanding that all knowledge work is a matter of programming and the opportunity to automate a better workflow with extensible software systems – there are lessons from the &lt;a href=&quot;http://git-scm.com/book/en/v2&quot;&gt;professional use of Git distributed version-control database technology&lt;/a&gt; and the development of extensible, open source software that apply to EVERY business with a future.&lt;/p&gt;

&lt;p&gt;The Git story is one that particularly worth understanding.  Git software didn’t exist just a little 10 years ago; it was created for the Linux kernel, but Git’s impact will probably be larger than Linux – because of how Git provides for distributed, decentralized team workflows for geographically-dispersed teams.  Although Git might have emerged from a particular software development need, it is very important to understand that the uses for Git are not just about software … Git will change the workflow of ANYONE doing ANY kind knowledge work [if it hasn’t already].  Beyond just geography or physical barriers, why couldn’t a a technology like Git [and Git host like Github, tools like Gitter] by changing the workplace and workflows help diversify workflows and really change things like the fact that &lt;strong&gt;&lt;a href=&quot;https://www.os4w.org/&quot;&gt;only one in ten open source contributors are women&lt;/a&gt;&lt;/strong&gt;?  &lt;em&gt;Why do we need to tolerate cultures that perpetuate that kind of problem any more?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by thinking about how a Git workflow radically changes or completely ELIMINATES meetings it is important to think about what that means for a culture of more diverse, geographically-distributed professionals who WERE unable for good reasons (eg, childcare, care of an elderly parent) to participate in meetings before.  If we think about that long enough, we start realizing deeper reasons for WHY the meetings are now unnecessary [except for the comfort of dinosaurs].  Git-centric conversations about writing/editing/issues in using code/content in repositories gravitate toward a continually transcripted chat-driven 24x7 conversation which does not need to interrupt the other work and mental focus of participants.  The technology of these Git chats includes handy and extensible repository-centric chat tools like Gitter for keeping everyone in the conversation focused on the same issue.  Moreover, the urls for each conversation node in the transcript eliminate the annoying “He said/She said” games that get played with flawed recollections of verbal meetings.  For chats and reasons related to the &lt;a href=&quot;https://help.github.com/categories/graphs-and-contributions/&quot;&gt;codegraphs of contributions and other activity&lt;/a&gt;, Git is also changing the way that professionals and professional teams are managed [because everyone can see who is doing what when; team structures get a lot flatter and there’s less room for politics or &lt;em&gt;weasel&lt;/em&gt;] … beyond that, a Git portfolio or GitHub &lt;a href=&quot;https://help.github.com/articles/viewing-contributions-on-your-profile-page/&quot;&gt;professional profile&lt;/a&gt; also changes the way those professionals develop their resumes and &lt;em&gt;advertise&lt;/em&gt; their body of or work or &lt;strong&gt;&lt;a href=&quot;https://help.github.com/categories/commits/&quot;&gt;commits&lt;/a&gt;&lt;/strong&gt; to repositories which represent their collaborative work history.&lt;/p&gt;

&lt;p&gt;Github [the largest host of Git repositories] provides for a common, standardized, hyper-efficient Git workflow … the Github workflow is so efficient because it applies seamlessly as developers or authors switch to OTHER open source projects and other teams that are using GitHub … Github has had a GIGANTIC impact on software development in the last five years and this impact is expanding … all kinds of knowledge workers who write books or develop any kind of content collaboratively are moving to Git and Github  … it is worth reading the account of Github’s rise on Wired magazine to understand the larger significance of what &lt;a href=&quot;http://www.wired.com/tag/github/&quot;&gt;Github&lt;/a&gt; is about.&lt;/p&gt;

&lt;p&gt;With Git all authors participating in a project have version-controlled copies of the entire project repository [or repositories] on their own local machines.  Git manages the edits/revisions while providing full tracking of exactly who did what to the code or text document … Git also retains all branches or forks – ALL of the creation/edit/revision/merge history is there, so there don’t have to be any worries about deletions or unwanted changes.  This allows for COMFORTABLY adopting a radically decentralized, distributed workflow for dispersed teams as well as meshing people with unconventional schedules (eg nightowls collaborating with early-risers and normal people with 9-to-5 jobs who code after hours).&lt;/p&gt;

&lt;p&gt;It is important to reiterate that Github is ONLY one host of open source Git databases … there are other hosts, but there are very solid reasons why Github has rapidly become the largest host using the Git software, not all of those reasons are in the Wired article – one BIG reason is GitHub’s CIO Scott Chacon, &lt;a href=&quot;https://youtu.be/ZDR433b0HJY&quot;&gt;how incredibly deep Chacon’s knowledge of Git was&lt;/a&gt; years before anyone else’s AND how hard Chacon is now driving Github now to increase the depth of its knowledge of Git even further by looking at how GitHub users break the system with edge cases, boundary conditions, runaway code and all sorts of unique issues that pop up on the radar screen of a host with Github’s scale … it’s not just that Github is getting better at hosting Git; Git is getting better, too.  The Git software that is used for these databases is itself an open source project and there are plenty of other Git hosts who can step in if Github falters or changes. It is also important to understand WHY the Git open source software is not standing still.  The scale of Github and its involvement in the open source Git project are driving Git to improve and “grind the rough edges off” – the immense scale and scope in the usage profile is pushing Git to mature into a SIMPLER software package!&lt;/p&gt;

&lt;p&gt;If you want to learn more about Git, the best resource is Chacon’s book, &lt;a href=&quot;https://github.com/progit/progit2&quot;&gt;ProGit2&lt;/a&gt; … it’s available as a free download for Kindle (mobi) or Apple iBooks (epub) or PDF or HTML5 or … the full source of ProGit2 [prior to publishing] is available as &lt;a href=&quot;https://github.com/progit/progit2&quot;&gt;the ProGit2 GitHub repo&lt;/a&gt; if anyone wants to write a better book or one more well-tailored to their particular needs.  The GitHub guys really “eat their own dog food” when it comes to their fanatical belief in open source and transforming workflows with Git … and their philosophical freeopensourcedness of “giving it all away” has probably caused a lot journos, experts and other dinosaurs to dismiss how big of a deal GitHub is …&lt;/p&gt;

&lt;p&gt;It is very important to understand that Github and Git are not just about software … those technologies apply to all kinds of knowledge work AND they are extensible, open source technologies that will continue to get better if we master them and make them better.  We need to understand that stupid, unproductive cultures are not just about failing to recognize people’s contributions or somehow hurting the feelings of productive people.  The backward cultures that we now settle for are not just about failing to be kind [although that is bad enough], those cultures are costing us because they are about failing to accelerated the development of &lt;a href=&quot;http://www.slideshare.net/reed2001/culture-1798664&quot;&gt;MORE healthy, MORE enjoyable, MORE PRODUCTIVE, MORE customer-centric cultures&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 03:30:00 -0500</pubDate>
        <link>/workflow-as-code/2015/09/09/Workflow-As-Code.html</link>
        <guid isPermaLink="true">/workflow-as-code/2015/09/09/Workflow-As-Code.html</guid>
        
        
        <category>workflow-as-code</category>
        
      </item>
    
      <item>
        <title>The GitHubification of Professional Life</title>
        <description>&lt;p&gt;&lt;strong&gt;What if we take the relationships and connections in OUR data and reimagined OUR professional efforts and organizations along those data-driven algorithmic relationships? What would that look like?&lt;/strong&gt; Could professionals govern themselves and govern their relationships in a fair, open, transparent equitable manner with smart-contracts and version-controlled [and code-graphed] repositories of the commits they make in their workflow? &lt;strong&gt;How can we build more transparent and equitable organizations that allows professionals to exercise greater control over their daily workflow?&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us that &lt;em&gt;organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations.&lt;/em&gt;  This means that the organizations which have been trying to produce new innovative products are all going to fail at really changing their products OR their development processes because their organizations are inherently corrupted by old methods, thoroughly calcified and the professional who must develop within this calcified old structure cannot do anything other than produce a new revision of the same old crap that the organization always has produce. Increasing we see that organizations must ACQUIRE new technology rather than develop it themselves … and &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us that this is LAW; it might be disappointing, but this is the reality of development.  And professionals that work within the traditional structure are condemned to suffer the doom and stagnation of the traditional structure UNTIL the organization somehow acquires a new methodology or embraces the leadership of a better approach.&lt;/p&gt;

&lt;p&gt;Enter GitHub and the GitHubification of professional work and what has happened in explosively successful companies like &lt;a href=&quot;http://techblog.netflix.com/&quot;&gt;Netflix&lt;/a&gt;. &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;Open source socially-produced code has arrived&lt;/a&gt; because the most savvy DevOps engineers thoroughly understand why collaborating on an open source team is not only fun and that the collaborative effort also “moves the ball ahead” for everyone … there’s a private intrinsic reward, but with the &lt;a href=&quot;https://help.github.com/categories/graphs-and-contributions/&quot;&gt;GitHub graphs and contributions metrics&lt;/a&gt; there is also the direct professional recognition [and possible financial reward] that comes from the public trail of commits.&lt;/p&gt;

&lt;p&gt;The transparency and code-graphhing of Github is really nothing more than the reliability growth analysis and collecting, modeling, analyzing and interpreting data from the code graph of a open source development program.  We assess the trajectory of the time and money required to develop a solution by looking at the GitHub codegraph … but in order to really understand the GitHub codegraph we need to have an appreciation for &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_(software)&quot;&gt;Git&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_(software)&quot;&gt;history of and rational for distributed version control systems&lt;/a&gt; and the practical nuts-and-bolts of the &lt;a href=&quot;https://youtu.be/FyfwLX4HAxM?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&quot;&gt;foundations of Git, use Git on the command line and the Github graphical user interfaces&lt;/a&gt;… and of course we should understand the economics of &lt;a href=&quot;https://www.quora.com/What-makes-GitHub-such-an-important-and-strategic-web-property&quot;&gt;what the GitHub social coding ecosystem is about&lt;/a&gt; or how &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;GitHub conquered Microsoft and Google and everyone else&lt;/a&gt; and what &lt;a href=&quot;https://help.github.com/articles/be-social/&quot;&gt;being social&lt;/a&gt; and then &lt;a href=&quot;https://developer.github.com/program/&quot;&gt;extending Github platform&lt;/a&gt; is about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t worry if this doesn’t make sense yet, it will&lt;/strong&gt; … it will make more and more sense to you as you &lt;strong&gt;use Github&lt;/strong&gt; to collaborate with other developers and use that experience to show you how to evaluate the GitHub codegraphs of various &lt;a href=&quot;https://help.github.com/articles/about-repository-graphs/&quot;&gt;development repositories&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/articles/viewing-contributions-on-your-profile-page/&quot;&gt;developer progress&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 03:30:00 -0500</pubDate>
        <link>/technology/2015/08/28/The-GitHubification-of-Professional-Life.html</link>
        <guid isPermaLink="true">/technology/2015/08/28/The-GitHubification-of-Professional-Life.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
  </channel>
</rss>
