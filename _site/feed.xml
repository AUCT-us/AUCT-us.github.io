<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MarkBruns Tech Blog</title>
    <description>This is my blog about version-controlled social production of open source technology ... feel free to reach out to me and tell me how I can be of service to you!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Sep 2015 15:23:13 -0500</pubDate>
    <lastBuildDate>Sun, 13 Sep 2015 15:23:13 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Workflow-As-Code ... Culture Drives Freedom And Responsibility</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.forbes.com/sites/joshbersin/2015/03/13/culture-why-its-the-hottest-topic-in-business-today/&quot;&gt;Culture&lt;/a&gt; should be an important topic because organizational culture drives organization output.  How can we enable the &lt;a href=&quot;http://www.slideshare.net/reed2001/culture-1798664&quot;&gt;most healthy, most enjoyable, most productive culture&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The practical experience of the most successful emergent up-and-coming firms on the planet right now, such as &lt;a href=&quot;http://techblog.netflix.com/&quot;&gt;Netflix&lt;/a&gt; or &lt;a href=&quot;https://youtu.be/2fBNuK6CRmA?t=54m46s&quot;&gt;GitHub&lt;/a&gt; or Airbnb or Uber or any emergent company you want to pick, suggest that a better, more dynamic and antifragile culture is NOT a matter of diversity quotas or cool perks or quirky policy or any nice little participation ribbon tied to some secondary or tertiary initiative that was allowed to pollute the work environment … the most important thing about a better culture is customer-driven focus … that means that everyone must respect and serve the central mission of the organization with an expectation of performance and delivery on SMART objectives that are aligned to the customer-driven focus … a better culture comes with the freedom and responsibility to build personal and professional independence and to be able to move on to something that serves customers even better.&lt;/p&gt;

&lt;p&gt;It is about lean thinking, seeing waste and designing the non-value-added distractions out of the equation and optimizing the flow past the constraints in our systems and our workflow.   A better FLOW of work that has become practically achievable by understanding that all knowledge work is a matter of programming and the opportunity to automate a better workflow with extensible software systems – there are lessons from the &lt;a href=&quot;http://git-scm.com/book/en/v2&quot;&gt;professional use of Git distributed version-control database technology&lt;/a&gt; and the development of extensible, open source software that apply to EVERY business with a future.&lt;/p&gt;

&lt;p&gt;The Git story is one that particularly worth understanding.  Git software didn’t exist just a little 10 years ago; it was created for the Linux kernel, but Git’s impact will probably be larger than Linux – because of how Git provides for distributed, decentralized team workflows for geographically-dispersed teams.  Although Git might have emerged from a particular software development need, it is very important to understand that the uses for Git are not just about software … Git will change the workflow of ANYONE doing ANY kind knowledge work [if it hasn’t already].  Beyond just geography or physical barriers, why couldn’t a a technology like Git [and Git host like Github, tools like Gitter] by changing the workplace and workflows help diversify workflows and really change things like the fact that &lt;strong&gt;&lt;a href=&quot;https://www.os4w.org/&quot;&gt;only one in ten open source contributors are women&lt;/a&gt;&lt;/strong&gt;?  &lt;em&gt;Why do we need to tolerate cultures that perpetuate that kind of problem any more?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by thinking about how a Git workflow radically changes or completely ELIMINATES meetings it is important to think about what that means for a culture of more diverse, geographically-distributed professionals who WERE unable for good reasons (eg, childcare, care of an elderly parent) to participate in meetings before.  If we think about that long enough, we start realizing deeper reasons for WHY the meetings are now unnecessary [except for the comfort of dinosaurs].  Git-centric conversations about writing/editing/issues in using code/content in repositories gravitate toward a continually transcripted chat-driven 24x7 conversation which does not need to interrupt the other work and mental focus of participants.  The technology of these Git chats includes handy and extensible repository-centric chat tools like Gitter for keeping everyone in the conversation focused on the same issue.  Moreover, the urls for each conversation node in the transcript eliminate the annoying “He said/She said” games that get played with flawed recollections of verbal meetings.  For chats and reasons related to the &lt;a href=&quot;https://help.github.com/categories/graphs-and-contributions/&quot;&gt;codegraphs of contributions and other activity&lt;/a&gt;, Git is also changing the way that professionals and professional teams are managed [because everyone can see who is doing what when; team structures get a lot flatter and there’s less room for politics or &lt;em&gt;weasel&lt;/em&gt;] … beyond that, a Git portfolio or GitHub &lt;a href=&quot;https://help.github.com/articles/viewing-contributions-on-your-profile-page/&quot;&gt;professional profile&lt;/a&gt; also changes the way those professionals develop their resumes and &lt;em&gt;advertise&lt;/em&gt; their body of or work or &lt;strong&gt;&lt;a href=&quot;https://help.github.com/categories/commits/&quot;&gt;commits&lt;/a&gt;&lt;/strong&gt; to repositories which represent their collaborative work history.&lt;/p&gt;

&lt;p&gt;Github [the largest host of Git repositories] provides for a common, standardized, hyper-efficient Git workflow … the Github workflow is so efficient because it applies seamlessly as developers or authors switch to OTHER open source projects and other teams that are using GitHub … Github has had a GIGANTIC impact on software development in the last five years and this impact is expanding … all kinds of knowledge workers who write books or develop any kind of content collaboratively are moving to Git and Github  … it is worth reading the account of Github’s rise on Wired magazine to understand the larger significance of what &lt;a href=&quot;http://www.wired.com/tag/github/&quot;&gt;Github&lt;/a&gt; is about.&lt;/p&gt;

&lt;p&gt;With Git all authors participating in a project have version-controlled copies of the entire project repository [or repositories] on their own local machines.  Git manages the edits/revisions while providing full tracking of exactly who did what to the code or text document … Git also retains all branches or forks – ALL of the creation/edit/revision/merge history is there, so there don’t have to be any worries about deletions or unwanted changes.  This allows for COMFORTABLY adopting a radically decentralized, distributed workflow for dispersed teams as well as meshing people with unconventional schedules (eg nightowls collaborating with early-risers and normal people with 9-to-5 jobs who code after hours).&lt;/p&gt;

&lt;p&gt;It is important to reiterate that Github is ONLY one host of open source Git databases … there are other hosts, but there are very solid reasons why Github has rapidly become the largest host using the Git software, not all of those reasons are in the Wired article – one BIG reason is GitHub’s CIO Scott Chacon, &lt;a href=&quot;https://youtu.be/ZDR433b0HJY&quot;&gt;how incredibly deep Chacon’s knowledge of Git was&lt;/a&gt; years before anyone else’s AND how hard Chacon is now driving Github now to increase the depth of its knowledge of Git even further by looking at how GitHub users break the system with edge cases, boundary conditions, runaway code and all sorts of unique issues that pop up on the radar screen of a host with Github’s scale … it’s not just that Github is getting better at hosting Git; Git is getting better, too.  The Git software that is used for these databases is itself an open source project and there are plenty of other Git hosts who can step in if Github falters or changes. It is also important to understand WHY the Git open source software is not standing still.  The scale of Github and its involvement in the open source Git project are driving Git to improve and “grind the rough edges off” – the immense scale and scope in the usage profile is pushing Git to mature into a SIMPLER software package!&lt;/p&gt;

&lt;p&gt;If you want to learn more about Git, the best resource is Chacon’s book, &lt;a href=&quot;https://github.com/progit/progit2&quot;&gt;ProGit2&lt;/a&gt; … it’s available as a free download for Kindle (mobi) or Apple iBooks (epub) or PDF or HTML5 or … the full source of ProGit2 [prior to publishing] is available as &lt;a href=&quot;https://github.com/progit/progit2&quot;&gt;the ProGit2 GitHub repo&lt;/a&gt; if anyone wants to write a better book or one more well-tailored to their particular needs.  The GitHub guys really “eat their own dog food” when it comes to their fanatical belief in open source and transforming workflows with Git … and their philosophical freeopensourcedness of “giving it all away” has probably caused a lot journos, experts and other dinosaurs to dismiss how big of a deal GitHub is … it is very important to understand that Github and Git are not just about software.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 03:30:00 -0500</pubDate>
        <link>/workflow-as-code/2015/09/09/Workflow-As-Code.html</link>
        <guid isPermaLink="true">/workflow-as-code/2015/09/09/Workflow-As-Code.html</guid>
        
        
        <category>workflow-as-code</category>
        
      </item>
    
      <item>
        <title>The GitHubification of Professional Life</title>
        <description>&lt;p&gt;&lt;strong&gt;What if we take the relationships and connections in OUR data and reimagined OUR professional efforts and organizations along those data-driven algorithmic relationships? What would that look like?&lt;/strong&gt; Could professionals govern themselves and govern their relationships in a fair, open, transparent equitable manner with smart-contracts and version-controlled [and code-graphed] repositories of the commits they make in their workflow? &lt;strong&gt;How can we build more transparent and equitable organizations that allows professionals to exercise greater control over their daily workflow?&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us that &lt;em&gt;organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations.&lt;/em&gt;  This means that the organizations which have been trying to produce new innovative products are all going to fail at really changing their products OR their development processes because their organizations are inherently corrupted by old methods, thoroughly calcified and the professional who must develop within this calcified old structure cannot do anything other than produce a new revision of the same old crap that the organization always has produce. Increasing we see that organizations must ACQUIRE new technology rather than develop it themselves … and &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us that this is LAW; it might be disappointing, but this is the reality of development.  And professionals that work within the traditional structure are condemned to suffer the doom and stagnation of the traditional structure UNTIL the organization somehow acquires a new methodology or embraces the leadership of a better approach.&lt;/p&gt;

&lt;p&gt;Enter GitHub and the GitHubification of professional work and what has happened in explosively successful companies like &lt;a href=&quot;http://techblog.netflix.com/&quot;&gt;Netflix&lt;/a&gt;. &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;Open source socially-produced code has arrived&lt;/a&gt; because the most savvy DevOps engineers thoroughly understand why collaborating on an open source team is not only fun and that the collaborative effort also “moves the ball ahead” for everyone … there’s a private intrinsic reward, but with the &lt;a href=&quot;https://help.github.com/categories/graphs-and-contributions/&quot;&gt;GitHub graphs and contributions metrics&lt;/a&gt; there is also the direct professional recognition [and possible financial reward] that comes from the public trail of commits.&lt;/p&gt;

&lt;p&gt;The transparency and code-graphhing of Github is really nothing more than the reliability growth analysis and collecting, modeling, analyzing and interpreting data from the code graph of a open source development program.  We assess the trajectory of the time and money required to develop a solution by looking at the GitHub codegraph … but in order to really understand the GitHub codegraph we need to have an appreciation for &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_(software)&quot;&gt;Git&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_(software)&quot;&gt;history of and rational for distributed version control systems&lt;/a&gt; and the practical nuts-and-bolts of the &lt;a href=&quot;https://youtu.be/FyfwLX4HAxM?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&quot;&gt;foundations of Git, use Git on the command line and the Github graphical user interfaces&lt;/a&gt;… and of course we should understand the economics of &lt;a href=&quot;https://www.quora.com/What-makes-GitHub-such-an-important-and-strategic-web-property&quot;&gt;what the GitHub social coding ecosystem is about&lt;/a&gt; or how &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;GitHub conquered Microsoft and Google and everyone else&lt;/a&gt; and what &lt;a href=&quot;https://help.github.com/articles/be-social/&quot;&gt;being social&lt;/a&gt; and then &lt;a href=&quot;https://developer.github.com/program/&quot;&gt;extending Github platform&lt;/a&gt; is about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t worry if this doesn’t make sense yet, it will&lt;/strong&gt; … it will make more and more sense to you as you &lt;strong&gt;use Github&lt;/strong&gt; to collaborate with other developers and use that experience to show you how to evaluate the GitHub codegraphs of various &lt;a href=&quot;https://help.github.com/articles/about-repository-graphs/&quot;&gt;development repositories&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/articles/viewing-contributions-on-your-profile-page/&quot;&gt;developer progress&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 03:30:00 -0500</pubDate>
        <link>/technology/2015/08/28/The-GitHubification-of-Professional-Life.html</link>
        <guid isPermaLink="true">/technology/2015/08/28/The-GitHubification-of-Professional-Life.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
  </channel>
</rss>
